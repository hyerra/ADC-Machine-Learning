regressor <- lm(Distance.Traveled..miles. ~ .,
data = training_set)
y_pred <- predict(regressor, newdata = test_fold[-3])
cm <- table(test_fold[, 3], y_pred)
accuracy <- (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
accuracy
})
# Battery Life Predictor
# Predicts how far a drone can travel given certain weather conditions.
# Importing the dataset
dataset <- read.csv('Drone Battery Life Data.csv')
# Splitting the dataset into a Training and Testing set
library(caTools)
split <- sample.split(dataset$Distance.Traveled, SplitRatio = 0.9)
training_set <- subset(dataset, split == T)
testing_set <- subset(dataset, split == F)
# Fitting Regression to the Data set
regressor <- lm(Distance.Traveled..miles. ~ .,
data = training_set)
# Battery Life Predictor
# Predicts how far a drone can travel given certain weather conditions.
# Importing the dataset
dataset <- read.csv('Drone Battery Life Data.csv')
# Splitting the dataset into a Training and Testing set
library(caTools)
split <- sample.split(dataset$Distance.Traveled, SplitRatio = 0.9)
training_set <- subset(dataset, split == T)
testing_set <- subset(dataset, split == F)
# Fitting Regression to the Data set
regressor <- lm(Distance.Traveled..miles. ~ .,
data = training_set)
# Applying k-Fold Cross Validation
library(caret)
folds <- createFolds(training_set$Distance.Traveled..miles., k = 10)
cv <- lapply(folds, function(x) {
training_fold <- training_set[-x,]
test_fold <- training_set[x,]
regressor <- lm(Distance.Traveled..miles. ~ .,
data = training_set)
y_pred <- predict(regressor, newdata = test_fold[-4])
cm <- table(test_fold[, 4], y_pred)
accuracy <- (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
accuracy
})
accuracy = mean(as.numeric(cv))
# Battery Life Predictor
# Predicts how far a drone can travel given certain weather conditions.
# Importing the dataset
dataset <- read.csv('Drone Battery Life Data.csv')
# Splitting the dataset into a Training and Testing set
library(caTools)
split <- sample.split(dataset$Distance.Traveled, SplitRatio = 0.9)
training_set <- subset(dataset, split == T)
testing_set <- subset(dataset, split == F)
# Fitting Regression to the Data set
regressor <- lm(Distance.Traveled..miles. ~ .,
data = training_set)
# Applying k-Fold Cross Validation
library(caret)
folds <- createFolds(training_set$Distance.Traveled..miles., k = 10)
cv <- lapply(folds, function(x) {
training_fold <- training_set[-x,]
test_fold <- training_set[x,]
regressor <- lm(Distance.Traveled..miles. ~ .,
data = training_set)
y_pred <- predict(regressor, newdata = test_fold[-5])
cm <- table(test_fold[, 5], y_pred)
accuracy <- (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
accuracy
})
accuracy = mean(as.numeric(cv))
# Battery Life Predictor
# Predicts how far a drone can travel given certain weather conditions.
# Importing the dataset
dataset <- read.csv('Drone Battery Life Data.csv')
# Splitting the dataset into a Training and Testing set
library(caTools)
split <- sample.split(dataset$Distance.Traveled, SplitRatio = 0.9)
training_set <- subset(dataset, split == T)
testing_set <- subset(dataset, split == F)
# Fitting Regression to the Data set
regressor <- lm(Distance.Traveled..miles. ~ .,
data = training_set)
# Applying k-Fold Cross Validation
library(caret)
folds <- createFolds(training_set$Distance.Traveled..miles., k = 10)
cv <- lapply(folds, function(x) {
training_fold <- training_set[-x,]
test_fold <- training_set[x,]
regressor <- lm(Distance.Traveled..miles. ~ .,
data = training_set)
y_pred <- predict(regressor, newdata = test_fold[-5])
cm <- table(test_fold[, 5], y_pred)
accuracy <- (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
accuracy
})
# Battery Life Predictor
# Predicts how far a drone can travel given certain weather conditions.
# Importing the dataset
dataset <- read.csv('Drone Battery Life Data.csv')
# Splitting the dataset into a Training and Testing set
library(caTools)
split <- sample.split(dataset$Distance.Traveled, SplitRatio = 0.9)
training_set <- subset(dataset, split == T)
testing_set <- subset(dataset, split == F)
# Fitting Regression to the Data set
regressor <- lm(Distance.Traveled..miles. ~ .,
data = training_set)
# Applying k-Fold Cross Validation
library(caret)
folds <- createFolds(training_set$Distance.Traveled..miles., k = 10)
cv <- lapply(folds, function(x) {
training_fold <- training_set[-x,]
test_fold <- training_set[x,]
regressor <- lm(Distance.Traveled..miles. ~ .,
data = training_set)
y_pred <- predict(regressor, newdata = test_fold[-5])
cm <- table(test_fold[, 5], y_pred)
accuracy <- (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
accuracy
})
cm
# Battery Life Predictor
# Predicts how far a drone can travel given certain weather conditions.
# Importing the dataset
dataset <- read.csv('Drone Battery Life Data.csv')
# Splitting the dataset into a Training and Testing set
library(caTools)
split <- sample.split(dataset$Distance.Traveled, SplitRatio = 0.9)
training_set <- subset(dataset, split == T)
testing_set <- subset(dataset, split == F)
# Fitting Regression to the Data set
regressor <- lm(Distance.Traveled..miles. ~ .,
data = training_set)
# Applying k-Fold Cross Validation
library(caret)
folds <- createFolds(training_set$Distance.Traveled..miles., k = 10)
View(folds)
cv <- lapply(folds, function(x) {
training_fold <- training_set[-x,]
test_fold <- training_set[x,]
regressor <- lm(Distance.Traveled..miles. ~ .,
data = training_set)
y_pred <- predict(regressor, newdata = test_fold[-5])
cm <- table(test_fold[, 5], y_pred)
accuracy <- (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
accuracy
})
# Battery Life Predictor
# Predicts how far a drone can travel given certain weather conditions.
# Importing the dataset
dataset <- read.csv('Drone Battery Life Data.csv')
# Splitting the dataset into a Training and Testing set
library(caTools)
split <- sample.split(dataset$Distance.Traveled, SplitRatio = 0.9)
training_set <- subset(dataset, split == T)
testing_set <- subset(dataset, split == F)
# Fitting Regression to the Data set
regressor <- lm(Distance.Traveled..miles. ~ .,
data = training_set)
# Applying k-Fold Cross Validation
library(caret)
folds <- createFolds(training_set$Distance.Traveled..miles., k = 10)
cv <- lapply(folds, function(x) {
training_fold <- training_set[-x,]
test_fold <- training_set[x,]
regressor <- lm(Distance.Traveled..miles. ~ .,
data = training_set)
y_pred <- predict(regressor, newdata = test_fold[-5])
cm <- table(test_fold[, 5], y_pred)
print(cm)
accuracy <- (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
accuracy
})
accuracy = mean(as.numeric(cv))
# Battery Life Predictor
# Predicts how far a drone can travel given certain weather conditions.
# Importing the dataset
dataset <- read.csv('Drone Battery Life Data.csv')
# Splitting the dataset into a Training and Testing set
library(caTools)
split <- sample.split(dataset$Distance.Traveled, SplitRatio = 0.9)
training_set <- subset(dataset, split == T)
testing_set <- subset(dataset, split == F)
# Fitting Regression to the Data set
regressor <- lm(Distance.Traveled..miles. ~ .,
data = training_set)
# Applying k-Fold Cross Validation
library(caret)
folds <- createFolds(training_set$Distance.Traveled..miles., k = 10)
cv <- lapply(folds, function(x) {
training_fold <- training_set[-x,]
test_fold <- training_set[x,]
regressor <- lm(Distance.Traveled..miles. ~ .,
data = training_fold)
y_pred <- predict(regressor, newdata = test_fold[-5])
cm <- table(test_fold[, 5], y_pred)
print(cm)
accuracy <- (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
accuracy
})
accuracy = mean(as.numeric(cv))
# Battery Life Predictor
# Predicts how far a drone can travel given certain weather conditions.
# Importing the dataset
dataset <- read.csv('Drone Battery Life Data.csv')
# Splitting the dataset into a Training and Testing set
library(caTools)
split <- sample.split(dataset$Distance.Traveled, SplitRatio = 0.9)
training_set <- subset(dataset, split == T)
testing_set <- subset(dataset, split == F)
# Fitting Regression to the Data set
regressor <- lm(Distance.Traveled..miles. ~ .,
data = training_set)
summary(regressor)
# Battery Life Predictor
# Predicts how far a drone can travel given certain weather conditions.
# Importing the dataset
dataset <- read.csv('Drone Battery Life Data.csv')
# Splitting the dataset into a Training and Testing set
library(caTools)
split <- sample.split(dataset$Distance.Traveled, SplitRatio = 0.9)
training_set <- subset(dataset, split == T)
testing_set <- subset(dataset, split == F)
# Fitting Regression to the Data set
regressor = svm(Distance.Traveled..miles.,
data = dataset,
type = 'eps-regression')
summary(regressor)
# Battery Life Predictor
# Predicts how far a drone can travel given certain weather conditions.
# Importing the dataset
dataset <- read.csv('Drone Battery Life Data.csv')
# Splitting the dataset into a Training and Testing set
library(caTools)
split <- sample.split(dataset$Distance.Traveled, SplitRatio = 0.9)
training_set <- subset(dataset, split == T)
testing_set <- subset(dataset, split == F)
# Fitting Regression to the Data set
regressor = svm(Distance.Traveled..miles.,
data = dataset,
type = 'eps-regression')
regressor = randomForest(x = dataset[-5],
y = dataset$Salary,
ntree = 500)
summary(regressor)
# Battery Life Predictor
# Predicts how far a drone can travel given certain weather conditions.
# Importing the dataset
dataset <- read.csv('Drone Battery Life Data.csv')
# Splitting the dataset into a Training and Testing set
library(caTools)
split <- sample.split(dataset$Distance.Traveled, SplitRatio = 0.9)
training_set <- subset(dataset, split == T)
testing_set <- subset(dataset, split == F)
# Fitting Regression to the Data set
regressor = svm(Distance.Traveled..miles.,
data = dataset,
type = 'eps-regression')
#regressor = randomForest(x = dataset[-5],
y = dataset$Salary,
ntree = 500)
summary(regressor)
# Battery Life Predictor
# Predicts how far a drone can travel given certain weather conditions.
# Importing the dataset
dataset <- read.csv('Drone Battery Life Data.csv')
# Splitting the dataset into a Training and Testing set
library(caTools)
split <- sample.split(dataset$Distance.Traveled, SplitRatio = 0.9)
training_set <- subset(dataset, split == T)
testing_set <- subset(dataset, split == F)
# Fitting Regression to the Data set
regressor = svm(Distance.Traveled..miles.,
data = dataset,
type = 'eps-regression')
#regressor = randomForest(x = dataset[-5],
#y = dataset$Salary,
#ntree = 500)
summary(regressor)
# Battery Life Predictor
# Predicts how far a drone can travel given certain weather conditions.
# Importing the dataset
dataset <- read.csv('Drone Battery Life Data.csv')
# Splitting the dataset into a Training and Testing set
library(caTools)
split <- sample.split(dataset$Distance.Traveled, SplitRatio = 0.9)
training_set <- subset(dataset, split == T)
testing_set <- subset(dataset, split == F)
# Fitting Regression to the Data set
#regressor = svm(Distance.Traveled..miles.,
#data = dataset,
#type = 'eps-regression')
regressor = randomForest(x = dataset[-5],
y = dataset$Salary,
ntree = 500)
summary(regressor)
# Battery Life Predictor
# Predicts how far a drone can travel given certain weather conditions.
# Importing the dataset
dataset <- read.csv('Drone Battery Life Data.csv')
# Splitting the dataset into a Training and Testing set
library(caTools)
split <- sample.split(dataset$Distance.Traveled, SplitRatio = 0.9)
training_set <- subset(dataset, split == T)
testing_set <- subset(dataset, split == F)
# Fitting Regression to the Data set
#regressor = svm(Distance.Traveled..miles.,
#data = dataset,
#type = 'eps-regression')
regressor = randomForest(x = dataset[-5],
y = dataset$Salary,
ntree = 10)
summary(regressor)
# Battery Life Predictor
# Predicts how far a drone can travel given certain weather conditions.
# Importing the dataset
dataset <- read.csv('Drone Battery Life Data.csv')
# Splitting the dataset into a Training and Testing set
library(caTools)
split <- sample.split(dataset$Distance.Traveled, SplitRatio = 0.9)
training_set <- subset(dataset, split == T)
testing_set <- subset(dataset, split == F)
# Fitting Regression to the Data set
#regressor = svm(Distance.Traveled..miles.,
#data = dataset,
#type = 'eps-regression')
regressor = randomForest(x = dataset[-5],
y = dataset$Salary,
ntree = 500)
summary(regressor)
# Battery Life Predictor
# Predicts how far a drone can travel given certain weather conditions.
# Importing the dataset
dataset <- read.csv('Drone Battery Life Data.csv')
# Splitting the dataset into a Training and Testing set
library(caTools)
split <- sample.split(dataset$Distance.Traveled, SplitRatio = 0.9)
training_set <- subset(dataset, split == T)
testing_set <- subset(dataset, split == F)
# Fitting Regression to the Data set
#regressor = svm(Distance.Traveled..miles.,
#data = dataset,
#type = 'eps-regression')
regressor = randomForest(x = dataset[-5],
y = dataset$Salary,
ntree = 10)
summary(regressor)
View(dataset)
# Battery Life Predictor
# Predicts how far a drone can travel given certain weather conditions.
# Importing the dataset
dataset <- read.csv('Drone Battery Life Data.csv')
# Splitting the dataset into a Training and Testing set
library(caTools)
split <- sample.split(dataset$Distance.Traveled, SplitRatio = 0.9)
training_set <- subset(dataset, split == T)
testing_set <- subset(dataset, split == F)
# Fitting Regression to the Data set
#regressor = svm(Distance.Traveled..miles.,
#data = dataset,
#type = 'eps-regression')
regressor = randomForest(x = dataset[-5],
y = dataset$Salary,
ntree = 500)
summary(regressor)
# Battery Life Predictor
# Predicts how far a drone can travel given certain weather conditions.
# Importing the dataset
dataset <- read.csv('Drone Battery Life Data.csv')
# Splitting the dataset into a Training and Testing set
library(caTools)
split <- sample.split(dataset$Distance.Traveled, SplitRatio = 0.9)
training_set <- subset(dataset, split == T)
testing_set <- subset(dataset, split == F)
# Fitting Regression to the Data set
#regressor = svm(Distance.Traveled..miles.,
#data = dataset,
#type = 'eps-regression')
library(randomForest)
regressor = randomForest(x = dataset[-5],
y = dataset$Salary,
ntree = 500)
summary(regressor)
View(regressor)
??train
# Battery Life Predictor
# Predicts how far a drone can travel given certain weather conditions.
# Importing the dataset
dataset <- read.csv('Drone Battery Life Data.csv')
# Splitting the dataset into a Training and Testing set
library(caTools)
split <- sample.split(dataset$Distance.Traveled, SplitRatio = 0.9)
training_set <- subset(dataset, split == T)
testing_set <- subset(dataset, split == F)
# Fitting Regression to the Data set
library(carat)
regressor <- train(form = Distance.Traveled..miles. ~ .,
dataset = training_set)
# Battery Life Predictor
# Predicts how far a drone can travel given certain weather conditions.
# Importing the dataset
dataset <- read.csv('Drone Battery Life Data.csv')
# Splitting the dataset into a Training and Testing set
library(caTools)
split <- sample.split(dataset$Distance.Traveled, SplitRatio = 0.9)
training_set <- subset(dataset, split == T)
testing_set <- subset(dataset, split == F)
# Fitting Regression to the Data set
library(carat)
regressor <- train(Distance.Traveled..miles. ~ .,
data = training_set)
# Battery Life Predictor
# Predicts how far a drone can travel given certain weather conditions.
# Importing the dataset
dataset <- read.csv('Drone Battery Life Data.csv')
# Splitting the dataset into a Training and Testing set
library(caTools)
split <- sample.split(dataset$Distance.Traveled, SplitRatio = 0.9)
training_set <- subset(dataset, split == T)
testing_set <- subset(dataset, split == F)
# Fitting Regression to the Data set
library(carat)
regressor <- train(Distance.Traveled..miles. ~ .,
data = training_set,
method = 'rf')
# Battery Life Predictor
# Predicts how far a drone can travel given certain weather conditions.
# Importing the dataset
dataset <- read.csv('Drone Battery Life Data.csv')
# Splitting the dataset into a Training and Testing set
library(caTools)
split <- sample.split(dataset$Distance.Traveled, SplitRatio = 0.9)
training_set <- subset(dataset, split == T)
testing_set <- subset(dataset, split == F)
# Fitting Regression to the Data set
library(caret)
regressor <- train(Distance.Traveled..miles. ~ .,
data = training_set,
method = 'rf')
# Battery Life Predictor
# Predicts how far a drone can travel given certain weather conditions.
# Importing the dataset
dataset <- read.csv('Drone Battery Life Data.csv')
# Splitting the dataset into a Training and Testing set
library(caTools)
split <- sample.split(dataset$Distance.Traveled, SplitRatio = 0.9)
training_set <- subset(dataset, split == T)
testing_set <- subset(dataset, split == F)
# Fitting Regression to the Data set
library(caret)
regressor <- train(Distance.Traveled..miles. ~ .,
data = training_set,
method = 'rf')
regressor
# Battery Life Predictor
# Predicts how far a drone can travel given certain weather conditions.
# Importing the dataset
dataset <- read.csv('Drone Battery Life Data.csv')
# Splitting the dataset into a Training and Testing set
library(caTools)
split <- sample.split(dataset$Distance.Traveled, SplitRatio = 0.9)
training_set <- subset(dataset, split == T)
testing_set <- subset(dataset, split == F)
# Fitting Regression to the Data set
library(caret)
regressor <- train(Distance.Traveled..miles. ~ .,
data = training_set,
method = 'bridge')
# Battery Life Predictor
# Predicts how far a drone can travel given certain weather conditions.
# Importing the dataset
dataset <- read.csv('Drone Battery Life Data.csv')
# Splitting the dataset into a Training and Testing set
library(caTools)
split <- sample.split(dataset$Distance.Traveled, SplitRatio = 0.9)
training_set <- subset(dataset, split == T)
testing_set <- subset(dataset, split == F)
# Fitting Regression to the Data set
library(caret)
regressor <- train(Distance.Traveled..miles. ~ .,
data = training_set,
method = 'rf')
regressor
# Battery Life Predictor
# Predicts how far a drone can travel given certain weather conditions.
# Importing the dataset
dataset <- read.csv('Drone Battery Life Data.csv')
# Splitting the dataset into a Training and Testing set
library(caTools)
split <- sample.split(dataset$Distance.Traveled, SplitRatio = 0.9)
training_set <- subset(dataset, split == T)
testing_set <- subset(dataset, split == F)
# Fitting Regression to the Data set
library(caret)
regressor <- train(Distance.Traveled..miles. ~ .,
data = training_set,
method = 'bridge')
regressor
View(dataset)
# Battery Life Predictor
# Predicts how far a drone can travel given certain weather conditions.
# Importing the dataset
dataset <- read.csv('Drone Battery Life Data.csv')
# Splitting the dataset into a Training and Testing set
library(caTools)
split <- sample.split(dataset$Distance.Traveled, SplitRatio = 0.9)
training_set <- subset(dataset, split == T)
testing_set <- subset(dataset, split == F)
# Fitting Regression to the Data set
regressor <- lm(Distance.Traveled..miles. ~ .,
data = training_set)
