print("Hello world!")
install.packages("swirl")
packageVersion("swirl")
install_from_swirl("R Programming")
library(swirl)
install_from_swirl("R Programming")
swirl()
5+7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
getwd()
ls()
x <- 9
ls
ls()
list.files()
?list.files
?args
args(list.files)
old.dir <- getwd()
getwd()
?dir.create
dir.create("testdir")
setwd("testdir")
getwd()
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
?file.rename
args(file.rename)
file.rename(from = "mytest.R", to = "mytest2.R")
?file.copy
file.copy(from = "mytest2.R", to = "mytest3.R")
play()
files.list()
list.files()
nxt()
?file.path
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create("testdir2/destdir3", recursive = TRUE)
?dir.create
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
setwd(old.dir)
1:20
pi:10
15:1
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
?seq
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0, 1, 2), times=10)
rep(c(0, 1, 2), each=10)
?cbind
x <- c(1,3, 5)
y <- c(3, 2, 10)
cbind(x, y)
swirl()
bye()
swirl()
import(swirl)
library(swirl)
swirl()
exit
c(0.5, 55, -10, 6)
num_vect <- c(0.5, 55, -10, 6)
tf = num_vect
info()
tf <- num_vect <1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = "  ")
paste(my_char, collapse = " ")
my_name <- c(my_char, "Harish")
my_name
?paste
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"));
paste(1:3, c("X", "Y", "Z"), sep = "");
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
3 * x
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0 / 0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
c(11, 2, NA)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
?identical
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
?cbind
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- ("patient", "age", "weight", "bp", "rating", "test")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
add2 <- function(x, y) {
x + y
}
add2(3, 5)
x[use]
above <- function(x, n) {
use <- x > n
x[use]
}
x <- 1:20
above(x, 12)
above <- function(x, n = 10) {
use <- x > n
x[use]
}
above(x)
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[, i], na.rm = removeNA)
}
?array
?rnorm
?rnorm
?gl
library(datasets)
head(airquality)
airquality$Month
split(airquality, airquality$Month)
s <- split(airquality, airquality$Month)
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
flag_colors
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, rang)
shape_mat <- sapply(flag_shapes, range)
shape_mat
play()
head(flag_shapes)
nxt()
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
play()
lapply(unique_vals, function(elem) elem[[2]])
nxt()
lapply(unique_vals, function(elem) elem[2])
gl(3, 10)
library(swirl)
swirl()
play()
?summary
summary(flags)
nxt()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
play()
?table
table(flags$landmass)
nxt()
table(flags$landmass)
table(flags$animate)
?tapply
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
?solve
gl(40, 10)
library(datasets)
class(data.frame())
library(swril)
library(swirl)
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
?head
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0, 1), prob = c(0.3, 0.7))
flips <- sample(c(0, 1), replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0, 1), size = 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
?plot
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
?plot
plot(cars, title = "My Plot")
plot(cars, mai = "My Plot")
plot(cars, main = "My Plot")
?plot
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
?plot
plot(cars, xlim = c(10, 15))
?points
plot(cars, pch = 2)
mtcars
data(mtcars)
play()
str(mtcars)
nxt()
?boxplot
boxplot(mpg ~ cyl, data = mtcars)
?boxplot
hist(mtcars$mpg)
?age
?ave
install.packages('caret')
# Battery Life Predictor
# Predicts how far a drone can travel given certain weather conditions.
# Importing the dataset
dataset <- read.csv('Drone Battery Life Data.csv')
# Splitting the dataset into a Training and Testing set
library(caTools)
split <- sample.split(dataset$Distance.Traveled, SplitRatio = 0.9)
training_set <- subset(dataset, split == T)
testing_set <- subset(dataset, split == F)
# Fitting Regression to the Data set
regressor <- lm(Distance.Traveled..miles. ~ .,
data = training_set)
# Predicting the Test set results
y_pred = predict(regressor, newdata = test_set)
setwd("~/Desktop/ADC-Machine-Learning")
# Battery Life Predictor
# Predicts how far a drone can travel given certain weather conditions.
# Importing the dataset
dataset <- read.csv('Drone Battery Life Data.csv')
# Splitting the dataset into a Training and Testing set
library(caTools)
split <- sample.split(dataset$Distance.Traveled, SplitRatio = 0.9)
training_set <- subset(dataset, split == T)
testing_set <- subset(dataset, split == F)
# Fitting Regression to the Data set
regressor <- lm(Distance.Traveled..miles. ~ .,
data = training_set)
# Predicting the Test set results
y_pred = predict(regressor, newdata = test_set)
# Battery Life Predictor
# Predicts how far a drone can travel given certain weather conditions.
# Importing the dataset
dataset <- read.csv('Drone Battery Life Data.csv')
# Splitting the dataset into a Training and Testing set
library(caTools)
split <- sample.split(dataset$Distance.Traveled, SplitRatio = 0.9)
training_set <- subset(dataset, split == T)
test_set <- subset(dataset, split == F)
# Fitting Regression to the Data set
regressor <- lm(Distance.Traveled..miles. ~ .,
data = training_set)
# Predicting the Test set results
y_pred = predict(regressor, newdata = test_set)
y_pred
View(test_set)
